// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  resetToken    String?   // Add this field
  resetTokenExpiry DateTime? // Add this field
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts       Account[]
  sessions       Session[]
  transactions   Transaction[]
  categories     Category[]
  financialAccounts FinancialAccount[]
  fileUploads    FileUpload[]
  settings       UserSettings?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model FinancialAccount {
  id        String   @id @default(cuid())
  name      String
  type      String   // checking, savings, credit, investment, other
  balance   Float
  currency  String   @default("USD")
  color     String?
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  fileUploads  FileUpload[]

  @@index([userId])
}

model Category {
  id        String   @id @default(cuid())
  name      String
  color     String
  budget    Float?
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@unique([name, userId])
  @@index([userId])
}

model Transaction {
  id          String   @id @default(cuid())
  date        DateTime
  description String
  amount      Float
  categoryId  String?
  accountId   String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category?        @relation(fields: [categoryId], references: [id])
  account  FinancialAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([categoryId])
  @@index([accountId])
  @@index([date])
}

model FileUpload {
  id              String   @id @default(cuid())
  filename        String
  fileType        String   // csv, xlsx, pdf
  uploadDate      DateTime @default(now())
  accountId       String
  userId          String
  transactionCount Int     @default(0)
  status          String   // processing, completed, error
  errorMessage    String?
  
  user    User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  account FinancialAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([accountId])
}

model UserSettings {
  id             String  @id @default(cuid())
  userId         String  @unique
  theme          String? // light, dark, system
  currency       String  @default("USD")
  language       String  @default("en")
  openaiApiKey   String? @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

